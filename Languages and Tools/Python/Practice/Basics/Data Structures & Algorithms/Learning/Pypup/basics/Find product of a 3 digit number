def product_digit_3d(a):
   last_digit = a % 10
   middle_digit = a // 10 % 10
   first_digit = a // 100
   total = last_digit * middle_digit * first_digit
   return total

print(product_digit_3d(123))
print('floor')
print(123 // 10)
print(123 // 100)
print('modulo')
print(123 % 10)
print(123 % 100)
"""
The provided Python code demonstrates the use of the floor division operator // and the modulus operator % on the integer 123.

The floor division operator // performs division and then rounds down (or 'floors') the result to the nearest whole number. In this code, 123 // 10 returns 12 because 123 divided by 10 is 12.3, and when you round down 12.3, you get 12. Similarly, 123 // 100 returns 1 because 123 divided by 100 is 1.23, and when you round down 1.23, you get 1.

The modulus operator % returns the remainder of a division operation. In this code, 123 % 10 returns 3 because when you divide 123 by 10, the remainder is 3. Similarly, 123 % 100 returns 23 because when you divide 123 by 100, the remainder is 23.

This code is useful for understanding how to extract individual digits from a number. For example, 123 // 10 effectively removes the last digit from the number, and 123 % 10 gives you the last digit of the number.

"""