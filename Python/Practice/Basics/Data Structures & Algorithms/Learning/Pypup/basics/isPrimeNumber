# Return Type = boolean
# Type of "x" = int
def is_prime2(x):
    if x < 2:
        return False

    for i in range(2, x):
        if x % i == 0 and i != 1 or i != i:
            return False

    return True
"""
# This works but is a bit redundant because we are checking if i != 1 and i != i
# i is automatically not 1 because of the first if statement
# i is automatically not i because of the range function

"""   

# Return Type = boolean
# Type of "x" = int
def is_prime(x):
    if x < 2:
        return False

    for i in range(2, x):
        if x % i == 0:
            return False

    return True

"""
# Better Option but slow because it is bruteforcing

"""

def is_prime(x):
   if x == 1:
       return False
   if x == 2:
       return True
   if x % 2 == 0:
       return False
   for i in range(3, x, 2):
       if x % i == 0:
           return False
   return True
"""
We have to check if x is 2 first and then check if it's an even number. 
Then, we can divide x by 3, 5, 7, 9 etc. This is because there is no way x will be divisible by an even number because x is odd number.
 This is significantly faster than the last approach but we can do even better.

"""

# Most Efficient
# Define a function called is_prime that takes an integer x as input
def is_prime(x):
   # If x is 1, return False because 1 is not a prime number
   if x == 1:
       return False
   # If x is 2, return True because 2 is a prime number
   if x == 2:
       return True
   # If x is even, return False because even numbers are not prime
   if x % 2 == 0:
       return False
   # Loop through odd numbers from 3 to the square root of x + 1
   for i in range(3, int(x ** 0.5) + 1, 2):
       # If x is divisible by i, return False because x is not a prime number
       if x % i == 0:
           return False
   # If x is not divisible by any number in the loop, return True because x is a prime number
   return True


"""
We just have to check until the square root of x. Can you see why? If you want to figure out yourself, please do. 

Let's take 24 as an example. 
It's divisors are: 1, 2, 3, 4, 6, 8, 12, 24. 
Notice that (1 * 24) = (2 * 12) = (3 * 8) = (4 * 6). If you draw a HCF tree 

If x is divisible by y, then it must be divisible by x/y. 
Meaning because 24 is divisible by 12 it must also be divisible by the factors of 12.

Based on this info, we can check up to square root of x and shouldn't go beyond.

There are more sophisticated and complicated algorithms to determine if a number is prime or not but this approach is good enough for most cases.






The +1 is added to the square root of x in the range function to ensure that the loop includes the square root value in the iterations when it's a whole number.

The range function in Python includes the start value but excludes the end value. So, if you want to include the end value in the loop, you need to add 1 to it.

For example, if x is 9, its square root is 3. If you don't add 1 and use range(3, int(9 ** 0.5)), the loop will not include 3 because range excludes the end value. But if you add 1 and use range(3, int(9 ** 0.5) + 1), the loop will include 3.

This is important in the context of checking for prime numbers, because you want to check if x is divisible by all numbers up to and including its square root. If x is not divisible by any number up to its square root, then it's a prime number.
 
"""
