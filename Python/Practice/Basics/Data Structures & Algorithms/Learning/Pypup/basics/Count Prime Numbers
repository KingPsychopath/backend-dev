
# This WORKS but it is VERY Slow for large test cases
class Solution:
    # Define a function to check if a number is prime
    # Return Type = bool
    # Type of "n" = int
    def isPrime(self, n):
        # If n is less than 2, it is not a prime number
        if n < 2:
            return False
        # Check if n is divisible by any odd number from 3 to the square root of n
        for i in range(3, int(n ** 0.5) + 1, 2):
            # If n is divisible by i, it is not a prime number
            if n % i == 0:
                return False
        # If n is not divisible by any number in the loop, it is a prime number
        return True

    # Define a function to count the number of prime numbers less than n
    # Return Type = int
    # Type of "n" = int
    def countPrimes(self, n: int) -> int:
        # If n is less than or equal to 2, there are no prime numbers less than n
        if n <= 2:
            return 0
        
        # Initialize count to 1 to account for 2
        count = 1

        # Check if each odd number from 3 to n-1 is prime
        for i in range(3, n, 2):
            if self.isPrime(i):
                count += 1
        return int(count)

# Another Elegant Solution is using The Sieve of Eratosthenes

def count_primes(n):
    if n < 2:
        return 0

    sieve = [1] * n
    sieve[0] = sieve[1] = 0

    for i in range(2, int(n ** 0.5) + 1):
        if sieve[i]:
            sieve[i * i: n: i] = [0] * len(sieve[i * i: n: i])

    return sum(sieve)

'''
Yes, there is a more efficient way to find all the primes below a certain integer. The Sieve of Eratosthenes is an ancient algorithm for finding all prime numbers up to any given limit. It works by iteratively marking the multiples of each prime number starting from 2.

In this function, sieve is a list that represents all numbers from 0 to n - 1. Initially, all numbers are marked as prime (1). The function then iteratively marks the multiples of each number starting from 2 as not prime (0). The function finally returns the sum of sieve, which is the count of prime numbers below n.

This function runs in O(n log log n) time, which is much more efficient than the original function that runs in approximately O(n^2) time.
'''