def findMinimumEqualSum(rowA, rowB):
    sumA = sum(rowA)
    sumB = sum(rowB)
    zerosA = rowA.count(0)
    zerosB = rowB.count(0)

    if sumA == sumB:
        return sumA

    diff = abs(sumA - sumB)

    if diff % 2 != 0:
        return -1

    if sumA < sumB:
        if zerosB < 1:
            return -1
        else:
            return sumA + diff
    else:
        if zerosA < 1:
            return -1
        else:
            return sumB + diff
        
        """
        
        To make learning more interactive and fun for students, a math teacher decides to teach a concept to students by using Lego blocks. There are 2 rows of legos, rowA (of length n) and rowB (of length m). Both rows hold legos with positive integer values printed on them. However, some values (possibly, none) are missing. The missing values are denoted by 0. Students need to incorporate the missing values. The task is to replace each 0 with a positive integer such that the sums of both arrays are equal. Return the minimum sum possible. If it is not possible to make the sums equal, return -1 .

Consider n = 3, m =4 and, rowA = [1, 0, 2] rowB = [1, 3, 0, 0]

After replacing the 0s in the rows: rowA = [1, 3, 2] rowB = [1, 3, 1, 1]

The sum of elements in rowA is 1 + 3 + 2 = 6 and the sum of elements in rowBis 1 + 3+ 1 +1 = 6. This is the minimum possible equal sum that can be achieved. Hence, the answer is 6.

Function Description Complete the function findMinimumEqualSum in the editor below. findMinimumEqualSum has the following parameters: int rowA[n]: one row of integers int rowB[m]: another row of integers

Returns: int: an integer, which, if positive, denotes the minimum equal sum, and if -1 indicates that it is not possible to obtain an equal sum.
        """